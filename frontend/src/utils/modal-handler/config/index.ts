import { create } from "zustand";

export enum ModalKeys {
  SAMPLE = "sample",
  SAMPLE_FULL_SCREEN_MD = "sample-full-screen-md",
  SAMPLE_DISMISS_OUTSIDE = "sample-dismiss-outside",
  REQUEST_PARAMETERS_LIST = "REQUEST_PARAMETERS_LIST",
  INACTIVE_RESOURCE = "INACTIVE_RESOURCE",
  REQUEST_DEVICE_DETAIL = "REQUEST_DEVICE_DETAIL",
  OPERATOR_CREATE_PARAMETER = "OPERATOR_CREATE_PARAMETER",
  OPERATOR_SUBMIT_PARAMETER_DIALOG = "OPERATOR_SUBMIT_PARAMETER_DIALOG",
  OPERATOR_LABORATORY_DETAILS = "OPERATOR_LABORATORY_DETAILS",
  OPERATOR_DEVICE_DETAILS = "OPERATOR_DEVICE_DETAILS",
  OPERATOR_EDIT_DEVICE = "OPERATOR_EDIT_DEVICE",
  OPERATOR_EDIT_EXPERIMENT = "OPERATOR_EDIT_EXPERIMENT",
  OPERATOR_VIEW_EXPERIMENT = "OPERATOR_VIEW_EXPERIMENT",
  OPERATOR_SET_APPOINTMENT = "OPERATOR_SET_APPOINTMENT",
  OPERATOR_EDIT_QUEUE = "OPERATOR_EDIT_QUEUE",
  OPERATOR_EDIT_QUEUE_STATUS = "OPERATOR_EDIT_QUEUE_STATUS",
  OPERATOR_DELETE_QUEUE = "OPERATOR_DELETE_QUEUE",
  VIEW_APPOINTMENT_INFO = "VIEW_APPOINTMENT_INFO",
  CUSTOMER_SELECT_APPOINTMENT = "CUSTOMER_SELECT_APPOINTMENT",
  CUSTOMER_CANCEL_APPOINTMENT = "CUSTOMER_CANCEL_APPOINTMENT",
  OPERATOR_DELETE_EXPERIMENT = "OPERATOR_DELETE_EXPERIMENT",
  OPERATOR_DELETE_DEVICE = "OPERATOR_DELETE_DEVICE",
  EDIT_SAMPLE = "EDIT_SAMPLE",
  DELETE_SAMPLE = "DELETE_SAMPLE",
  GRANTED = "granted-grant",
  GRANTS_LIST = "GRANTS_LIST",
  GRANT_SELF_ASSIGNMENT = "GRANT_SELF_ASSIGNMENT",
  CANCEL_GRANT_REQUEST = "granted-CANCEL_GRANT_REQUEST",
  REVOKE_GRANT_REQUEST = "REVOKE_GRANT_REQUEST",
  EDIT_USER = "edit-user",
  VIEW_USER = "VIEW_USER",
  DELETE_USER = "DELETE_USER",
  CHANGE_USER_PASSWORD = "CHANGE_USER_PASSWORD",
  CHANGE_USER_TYPE = "CHANGE_USER_TYPE",
  ADD_USER = "ADD-user",
  ADD_CUSTOMER = "ADD_CUSTOMER",
  OPERATOR_DELETE_PARAMETER = "OPERATOR_DELETE_PARAMETER",
  OPERATOR_EDIT_PARAMETER = "OPERATOR_EDIT_PARAMETER",
  OPERATOR_VIEW_PARAMETER = "OPERATOR_VIEW_PARAMETER",
  OPERATOR_EDIT_LAB = "OPERATOR_EDIT_LAB",
  OPERATOR_DELETE_FORM = "OPERATOR_DELETE_FORM",
  OPERATOR_VIEW_FORM = "OPERATOR_VIEW_FORM",
  OPERATOR_DELETE_GRANT = "OPERATOR_DELETE_GRANT",
  OPERATOR_EDIT_GRANT = "OPERATOR_EDIT_GRANT",
  OPERATOR_CREATE_GRANT = "OPERATOR_CREATE_GRANT",
  OPERATOR_CREATE_GROUP_GRANT_LIST = "OPERATOR_CREATE_GROUP_GRANT_LIST",
  EDIT_PAYMENT_RECORD = "EDIT_PAYMENT_RECORD",
  CREATE_PAYMENT_RECORD = "CREATE_PAYMENT_RECORD",
  DELETE_PAYMENT_RECORD = "DELETE_PAYMENT_RECORD",
  LOCK_PAYMENT_RECORD = "LOCK_PAYMENT_RECORD",
  CONTRADICTION_PAYMENT_RECORDS = "CONTRADICTION_PAYMENT_RECORDS",
  CHOOS_TIME = "CHOOS_TIME",
  REJECT_REQUEST = "REJECT_REQUEST",
  ACCEPT_REQUEST = "ACCEPT_REQUEST",
  UPLOAD_RESULT = "UPLOAD_RESULT",
  REQUEST_DISCOUNT = "REQUEST_DISCOUNT",
  CUSTOMER_REQUEST_RESULT = "CUSTOMER_REQUEST_RESULT",
  CUSTOMER_APPOINTMENTS_INFO = "CUSTOMER_APPOINTMENTS_INFO",
  EXPERIMENT_DURATION = "EXPERIMENT_DURATION",
  DISCOUNT_HISTORY = "DISCOUNT_HISTORY",
  REQUEST_TREF_CODE = "REQUEST_TREF_CODE",
  REQUEST_LABSNET_DISCOUNT = "REQUEST_LABSNET_DISCOUNT",
  REQUEST_HISTORY = "REQUEST_HISTORY",
  CUSTOMER_CHANGE_PASSWORD = "CUSTOMER_CHANGE_PASSWORD",
  SELECT_ACCOUNT_TYPE = "SELECT_ACCOUNT_TYPE",
  COPY_SAMPLE = "COPY_SAMPLE",
  LABSNET_GRANTS_LIST = "LABSNET_GRANTS_LIST",
  RESEARCH_GRANTS_LIST = "RESEARCH_GRANTS_LIST",
  LABSNET_GRANTS_REPORT = "LABSNET_GRANTS_REPORT",
  PARENT_REQUEST_FINANCIAL_INFO = "PARENT_REQUEST_FINANCIAL_INFO",
  REDIRECT_TO_PREPAYMENT = "REDIRECT_TO_PREPAYMENT",
  REQUEST_FLOW_DESCRIPTION = "REQUEST_FLOW_DESCRIPTION",
  PREVIEW_LAB_IMAGE = "PREVIEW_LAB_IMAGE",
  CROP_LAB_IMAGE = "CROP_LAB_IMAGE",
  REQUESTS_LIST_USER_GUIDE = "REQUESTS_LIST_USER_GUIDE",
  UPDATE_ISO = "UPDATE_ISO",
  SIGN_UP_RULES = "SIGN_UP_RULES",
}

type ModalHandlerType<TYPE> = {
  modalKey: ModalKeys | undefined;
  modalData: TYPE | undefined;
  openModal: (modalKey: ModalKeys, modalData?: TYPE) => void;
  hideModal: () => void;
};

export const useModalHandler = create<ModalHandlerType<any>>()((set) => ({
  modalData: undefined,
  modalKey: undefined,
  hideModal: () =>
    set(() => {
      return { modalKey: undefined, modalData: undefined };
    }),
  openModal: (modalKey, modalData) => {
    set(() => {
      return { modalKey: modalKey, modalData: modalData };
    });
  },
}));
